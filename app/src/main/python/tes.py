def validasi(data,k):
    validasi = []

    for i in range(len(data)):
        index = i+1
        if(i < len(data)-k):
            sumValid = 0
            for j in range(index,index+k):
                if(data[index][22]==data[j+1][22]):
                    sumValid += 1
        else:
            sumValid = 0
            for j in range(index,index+((len(data)-index))):
                if(data[index][22]==data[j+1][22]):
                    sumValid += 1
            for l in range(k-(len(data)-index)):
                if(data[index][22]==data[index-(l+1)][22]):
                    sumValid += 1
        nilaiValidasi = sumValid/k
        validasi.append(nilaiValidasi)
    return validasi

def ruleKhusus(data):
    if(data[0] == 1 or data[4] == 1 or data[8] == 1 or data[14] == 1
            or data[16] == 1 or data[17] == 1 or data[18] == 1 or data[19] == 1):
        return True
    else:
        return False

def euclideanDistance(dataInput, dataLatih):
    nilaiEuclidean = []
    for i in range(len(dataLatih)):
        baru = (dataInput[0]-dataLatih[i+1][0])**2 + (dataInput[1]-dataLatih[i+1][1])**2 + (dataInput[2]-dataLatih[i+1][2])**2+ (dataInput[3]-dataLatih[i+1][3])**2 + (dataInput[4]-dataLatih[i+1][4])**2 + (dataInput[5]-dataLatih[i+1][5])**2+ (dataInput[6]-dataLatih[i+1][6])**2 + (dataInput[7]-dataLatih[i+1][7])**2 + (dataInput[8]-dataLatih[i+1][8])**2+ (dataInput[9]-dataLatih[i+1][9])**2 + (dataInput[10]-dataLatih[i+1][10])**2 + (dataInput[11]-dataLatih[i+1][11])**2+ (dataInput[12]-dataLatih[i+1][12])**2 + (dataInput[13]-dataLatih[i+1][13])**2 + (dataInput[14]-dataLatih[i+1][14])**2+ (dataInput[15]-dataLatih[i+1][15])**2 + (dataInput[16]-dataLatih[i+1][16])**2 + (dataInput[17]-dataLatih[i+1][17])**2+ (dataInput[18]-dataLatih[i+1][18])**2 + (dataInput[19]-dataLatih[i+1][19])**2 + (dataInput[20]-dataLatih[i+1][20])**2+ (dataInput[21]-dataLatih[i+1][21])**2
        nilaiEuclidean.append(baru**(1/2))
    return nilaiEuclidean

def weighting(validation, euclidean):
    nilaiWeight = []
    for i in range(len(validation)):
        nilai = validation[i] * (1/(euclidean[i]+0.5))
        nilaiWeight.append(nilai)
    return nilaiWeight

def terbesar(k,value):
    index = []
    for i in range(k):
        indexTerbesar = value.index(max(value))
        index.append(1+indexTerbesar)
        value[indexTerbesar] = 0
    return index

def diagnosis(datalatih, index):
    hasil = []
    beracun = 0
    tidakBeracun = 0
    for i in range(len(index)):
        kelas = datalatih[index[i]][22]
        hasil.append(kelas)
    for i in range(len(hasil)):
        if(hasil[i]=="p"):
            beracun += 1
        else:
            tidakBeracun += 1
    if beracun > tidakBeracun:
        return "Beracun"
    else:
        return "Tidak Beracun"

def main(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,k):
    dictLatih = {1:[0.47,0.55,0.45,0.18,1,0.49,0.56,0.89,0.16,0.54,0.23,0.3,0.31,0.38,0.38,0.48,0.49,0.51,0.21,0.12,0.29,0.74,'p'],
                 2:[0.47,0.55,0.63,0.18,0,0.49,0.56,0.3,0.16,0.54,0.08,0.3,0.31,0.38,0.38,0.48,0.49,0.51,0.21,0.11,0,0.34,'e'],
                 3:[0.11,0.55,0.31,0.18,0,0.49,0.56,0.3,0.11,0.54,0.08,0.3,0.31,0.38,0.38,0.48,0.49,0.51,0.21,0.11,0,0.12,'e'],
                 4:[0.47,0.54,0.31,0.18,1,0.49,0.56,0.89,0.11,0.54,0.23,0.3,0.31,0.38,0.38,0.48,0.49,0.51,0.21,0.12,0.29,0.74,'p'],
                 5:[0.47,0.55,0.44,0.69,0.03,0.49,0.09,0.3,0.16,0.44,0.23,0.3,0.31,0.38,0.38,0.48,0.49,0.51,0.64,0.11,0,0.34,'e'],
                 6:[0.47,0.54,0.63,0.18,0,0.49,0.56,0.3,0.11,0.54,0.08,0.3,0.31,0.38,0.38,0.48,0.49,0.51,0.21,0.12,0,0.34,'e'],
                 7:[0.11,0.55,0.31,0.18,0,0.49,0.56,0.3,0.67,0.54,0.08,0.3,0.31,0.38,0.38,0.48,0.49,0.51,0.21,0.12,0,0.12,'e'],
                 8:[0.11,0.54,0.31,0.18,0,0.49,0.56,0.3,0.11,0.54,0.08,0.3,0.31,0.38,0.38,0.48,0.49,0.51,0.21,0.11,0.29,0.12,'e'],
                 9:[0.47,0.54,0.31,0.18,1,0.49,0.56,0.89,0.43,0.54,0.23,0.3,0.31,0.38,0.38,0.48,0.49,0.51,0.21,0.12,0.7,0.34,'p'],
                 10:[0.11,0.55,0.63,0.18,0,0.49,0.56,0.3,0.67,0.54,0.08,0.3,0.31,0.38,0.38,0.48,0.49,0.51,0.21,0.12,0.29,0.12,'e'],
                 11:[0.47,0.54,0.63,0.18,0,0.49,0.56,0.3,0.67,0.54,0.08,0.3,0.31,0.38,0.38,0.48,0.49,0.51,0.21,0.11,0,0.34,'e'],
                 12:[0.47,0.54,0.63,0.18,0,0.49,0.56,0.3,0.11,0.54,0.08,0.3,0.31,0.38,0.38,0.48,0.49,0.51,0.21,0.12,0.29,0.12,'e'],
                 13:[0.11,0.55,0.63,0.18,0,0.49,0.56,0.3,0.2,0.54,0.08,0.3,0.31,0.38,0.38,0.48,0.49,0.51,0.21,0.11,0.29,0.34,'e'],
                 14:[0.47,0.54,0.31,0.18,1,0.49,0.56,0.89,0.16,0.54,0.23,0.3,0.31,0.38,0.38,0.48,0.49,0.51,0.21,0.11,0.7,0.74,'p'],
                 15:[0.47,0.55,0.63,0.18,0,0.49,0.56,0.3,0.67,0.54,0.08,0.3,0.31,0.38,0.38,0.48,0.49,0.51,0.21,0.11,0.29,0.34,'e'],
                 16:[0.49,0.33,0.31,0.69,0.03,0.49,0.09,0.3,0.16,0.44,0.23,0.3,0.31,0.38,0.38,0.48,0.49,0.51,0.64,0.11,0.29,0.34,'e'],
                 17:[0.11,0.55,0.63,0.18,0,0.49,0.56,0.3,0.67,0.54,0.08,0.3,0.31,0.38,0.38,0.48,0.49,0.51,0.21,0.12,0,0.34,'e'],
                 18:[0.47,0.33,0.44,0.69,1,0.49,0.56,0.3,0.43,0.54,0.49,0.94,0.94,1,1,0.48,0.49,0.51,1,0.97,0.38,0.34,'p'],
                 19:[0.49,0.54,0.45,0.18,0.03,0.49,0.56,0.3,0.11,0.44,0.49,0.3,0.31,0,0.69,0.48,0.49,0.51,0.21,0.12,0.38,0.4,'e'],
                 20:[0.47,0.54,0.45,0.18,0.03,0.49,0.56,0.3,0.11,0.44,0.49,0.3,0.31,0.38,0,0.48,0.49,0.51,0.21,0.12,0.7,0.4,'e'],
                 21:[0.49,0.33,0.58,0.18,0.03,0.49,0.56,0.3,0.43,0.44,0.49,0.3,0.31,0.38,0.38,0.48,0.49,0.51,0.21,0.11,0.38,0.4,'e'],
                 22:[0.49,0.55,0.71,0.18,0.03,0.49,0.56,0.3,1,0.54,0.49,0.3,0.31,0.38,0.38,0.48,0.49,0.12,0.21,1,0.7,0.34,'p'],
                 23:[0.49,0.54,0.63,0.69,1,0.49,0.56,0.3,0.67,0.54,0.49,0.94,0.94,1,1,0.48,0.49,0.51,1,0.97,0.7,0.34,'p'],
                 24:[0.11,0.54,0.71,0.18,0.03,0.49,0.56,0.3,0.67,0.54,0.49,0.3,0.31,0.38,0.38,0.48,0.49,0.12,0.21,1,0.7,0.34,'p'],
                 25:[0.72,0.54,0.71,0.18,0.03,0.49,0.56,0.3,0,0.54,0.71,0.3,0.31,0.38,0.38,0.48,0.49,0.12,0.64,0.76,0.15,0,'e'],
                 26:[0.47,0.54,0.31,0.69,0.03,0.49,0.56,0.89,0.43,0.54,0.71,0.3,0.24,0.38,0.38,0.48,0.49,0.51,0,0.97,0.38,0.4,'e'],
                 27:[0.49,0.54,0.63,0.69,1,0.49,0.56,0.3,0.67,0.54,0.49,0.94,0.94,0.96,0.69,0.48,0.49,0.51,1,0.97,0.38,0.34,'p'],
                 28:[0.11,0.54,0.63,0.69,0.03,0.49,0.09,0.89,0.26,0.54,0.08,0.33,0.27,1,1,0.48,1,0.51,0.64,0.76,0.15,0.71,'p'],
                 29:[0.49,0.54,0.58,0.69,1,0.09,0.56,0.3,0.2,0.54,0.08,0.94,0.27,1,1,0.48,0.49,1,1,0.76,0.15,0.4,'p'],
                 30:[1,0.54,0.63,0.69,0.03,0.49,0.09,0.89,0.26,0.54,0.08,0.33,0.27,1,1,0.48,1,0.51,0.64,0.76,0.15,0.71,'p'],
                 31:[0.72,0.54,0.63,0.69,0.03,0.49,0.09,0.89,0.2,0.54,0.08,0.33,0.27,1,1,0.48,1,0.51,0.64,0.76,0.15,0.71,'p'],
                 32:[1,0.54,0.63,0.69,0.03,0.49,0.09,0.89,0.2,0.54,0.08,0.33,0.27,1,1,0.48,1,0.51,0.64,0.76,0.15,0.71,'p'],
                 33:[0.72,0.54,0.58,0.69,1,0.09,0.56,0.3,0.2,0.54,0.08,0.94,0.27,1,1,0.48,0.49,1,1,0.76,0.15,0.4,'p'],
                 34:[0.72,0.54,0.27,0.69,1,0.09,0.56,0.3,0.26,0.54,0.08,0.94,0.27,1,1,0.48,0.49,1,1,0.76,0.15,0.4,'p'],
                 35:[0.47,0.54,0.27,0.69,1,0.49,0.56,0.3,0.26,0.54,0.08,0.94,0.27,1,1,0.48,0.49,1,1,0.76,0.15,0.4,'p'],
                 36:[0.72,0.54,0.45,0.69,1,0.49,0.56,0.89,1,0.44,0.71,0.94,0.94,0.69,0.69,0.48,0.49,0.51,0.64,0.76,0.7,0.71,'p'],
                 37:[0.72,0.54,0.58,0.69,1,0.49,0.56,0.89,1,0.44,0.71,0.94,0.31,0.69,0.38,0.48,0.49,0.51,0.64,0.76,0.7,0.71,'p'],
                 38:[0.11,0.55,0.31,0.69,0.03,0.49,0.09,0.3,0.2,0.54,0.71,0.3,0.31,0.38,0.38,0.48,0.49,0.12,0.21,0.76,0,0.34,'e'],
                 39:[0.47,0.55,0.45,0.69,0.03,0.09,0.56,0.3,0,0.54,0.71,0.3,0.31,0,0,0.48,0,0.51,0.21,0.11,0.7,0.71,'e'],
                 40:[0.72,0.55,0.31,0.69,0.03,0.49,0.09,0.3,0.43,0.54,0.71,0.3,0.31,0.38,0.38,0.48,0.49,0.12,0.21,0.76,0,0.34,'e'],
                 41:[0.72,0.55,0.45,0.69,0.03,0.09,0.56,0.3,0,0.54,0.71,0.3,0.31,0,0,0.48,0,0.51,0.21,0,0.7,0.71,'e'],
                 42:[0.72,0.54,0.58,0.69,1,0.49,0.56,0.89,1,0.44,0.71,0.94,0.94,0.69,0.69,0.48,0.49,0.51,0.64,0.76,0.7,0.4,'p'],
                 43:[0.49,0.54,0.27,0.69,1,0.09,0.56,0.3,0.26,0.54,0.08,0.94,0.27,1,1,0.48,0.49,1,1,0.76,0.15,0.4,'p'],
                 44:[0.47,0.55,0.45,0.69,0.03,0.09,0.56,0.3,0.26,0.54,0.71,0.3,0.31,0,0,0.48,0,0.51,0.21,0,0.7,0.71,'e'],
                 45:[0.72,0.54,0.45,0.69,1,0.49,0.56,0.89,1,0.44,0.71,0.3,0.94,0.69,0.38,0.48,0.49,0.51,0.64,0.76,0.7,0.71,'p'],
                 46:[0.72,0.55,0.58,0.69,1,0.49,0.56,0.89,1,0.44,0.71,0.94,0.31,0.69,0.38,0.48,0.49,0.51,0.64,0.76,0.7,0.4,'p'],
                 47:[0.72,0.54,0.45,0.69,1,0.49,0.56,0.89,1,0.44,0.71,0.94,0.31,0.69,0.38,0.48,0.49,0.51,0.64,0.76,0.7,0.4,'p'],
                 48:[0.72,0.55,0.45,0.69,0.03,0.09,0.56,0.3,0.26,0.54,0.71,0.3,0.31,0,0,0.48,0,0.51,0.21,0,0.15,0.71,'e'],
                 49:[0.47,0.55,0.45,0.69,0.03,0.09,0.56,0.3,0.26,0.54,0.71,0.3,0.31,0,0,0.48,0,0.51,0.21,0,0.7,0.71,'e'],
                 50:[0.72,0.54,0.45,0.69,1,0.49,0.56,0.89,1,0.44,0.71,0.3,0.94,0.38,0.38,0.48,0.49,0.51,0.64,0.76,0.7,0.71,'p']
                 }
    inputData = [a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22]
    InputK = k
    hasil = ""
    if(ruleKhusus(inputData)==True):
        hasil ="Beracun"
    else:
        #dataBaru = numeric(inputData)
        valid = validasi(dictLatih,InputK)
        euclidean = euclideanDistance(inputData,dictLatih)
        weight = weighting(valid,euclidean)
        indexTerbesar = terbesar(InputK,weight)
        hasil = diagnosis(dictLatih,indexTerbesar)
    return(hasil)